"""
Script para ejecutar el servidor de la API del agente con memoria.

Este script facilita el inicio del servidor con configuraci√≥n personalizada
y proporciona un punto de entrada √∫nico para la aplicaci√≥n.
"""

import os
import sys
import uvicorn
from pathlib import Path

# Agregar el directorio actual al path para las importaciones
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))

def load_env_file():
    """Cargar variables de entorno desde archivo .env si existe."""
    env_file = current_dir / ".env"
    if env_file.exists():
        try:
            from dotenv import load_dotenv
            load_dotenv(env_file)
            print(f"‚úÖ Variables de entorno cargadas desde {env_file}")
        except ImportError:
            print("‚ö†Ô∏è python-dotenv no est√° instalado. Variables de entorno .env no cargadas.")
            print("   Instalar con: pip install python-dotenv")
    else:
        print(f"‚ÑπÔ∏è No se encontr√≥ archivo .env en {env_file}")
        print("   Puedes crear uno bas√°ndote en .env.example")

def check_requirements():
    """Verificar que los requisitos m√≠nimos est√©n disponibles."""
    missing_modules = []
    
    try:
        import fastapi
    except ImportError:
        missing_modules.append("fastapi")
    
    try:
        import uvicorn
    except ImportError:
        missing_modules.append("uvicorn")
    
    try:
        import langchain_google_genai
    except ImportError:
        missing_modules.append("langchain-google-genai")
    
    try:
        import langgraph
    except ImportError:
        missing_modules.append("langgraph")
    
    if missing_modules:
        print("‚ùå Faltan dependencias requeridas:")
        for module in missing_modules:
            print(f"   - {module}")
        print("\nüí° Instalar con: pip install -r requirements.txt")
        return False
    
    return True

def check_api_key():
    """Verificar que la API key de Google est√© configurada."""
    api_key = os.environ.get("GOOGLE_API_KEY")
    if not api_key:
        print("‚ùå GOOGLE_API_KEY no est√° configurada")
        print("\nüîß Config√∫rala de una de estas formas:")
        print("   1. Variable de entorno: export GOOGLE_API_KEY=tu_clave")
        print("   2. Archivo .env (ver .env.example)")
        print("   3. Config√∫rala ahora mismo:")
        
        api_key = input("   Ingresa tu Google API Key: ").strip()
        if api_key:
            os.environ["GOOGLE_API_KEY"] = api_key
            print("‚úÖ API Key configurada temporalmente")
            return True
        else:
            print("‚ùå No se proporcion√≥ API Key")
            return False
    else:
        # Mostrar solo los primeros y √∫ltimos caracteres por seguridad
        masked_key = api_key[:8] + "..." + api_key[-4:]
        print(f"‚úÖ Google API Key encontrada: {masked_key}")
        return True

def main():
    """Funci√≥n principal para ejecutar el servidor."""
    print("üöÄ Iniciando servidor del Agente con Memoria API")
    print("=" * 50)
    
    # Cargar variables de entorno
    load_env_file()
    
    # Verificar requisitos
    if not check_requirements():
        sys.exit(1)
    
    # Verificar API key
    if not check_api_key():
        sys.exit(1)
    
    # Configuraci√≥n del servidor
    host = os.environ.get("HOST", "0.0.0.0")
    port = int(os.environ.get("PORT", 8000))
    reload = os.environ.get("RELOAD", "true").lower() == "true"
    log_level = os.environ.get("LOG_LEVEL", "info")
    
    print("\nüìã Configuraci√≥n del servidor:")
    print(f"   Host: {host}")
    print(f"   Puerto: {port}")
    print(f"   Recarga autom√°tica: {reload}")
    print(f"   Nivel de log: {log_level}")
    
    print("\nüåê URLs disponibles:")
    print(f"   API: http://{host}:{port}")
    print(f"   Docs: http://{host}:{port}/docs")
    print(f"   ReDoc: http://{host}:{port}/redoc")
    
    print("\nüí° Para probar la API:")
    print("   python test_api.py                    # Pruebas autom√°ticas")
    print("   python test_api.py --interactive      # Chat interactivo")
    
    print("\n" + "=" * 50)
    print("üü¢ Iniciando servidor...")
    
    try:
        # Ejecutar el servidor
        uvicorn.run(
            "app.main:app",
            host=host,
            port=port,
            reload=reload,
            log_level=log_level,
            access_log=True
        )
    except KeyboardInterrupt:
        print("\n\nüõë Servidor detenido por el usuario")
    except Exception as e:
        print(f"\n‚ùå Error al iniciar el servidor: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()